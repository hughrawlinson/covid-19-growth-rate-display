{"version":3,"sources":["hooks/useCovidData.js","components/CountrySelector.js","App.js","index.js"],"names":["aggregateDay","day","reduce","acc","el","confirmed","deaths","recovered","date","CountrySelector","countries","selectedCountry","setSelectedCountry","options","map","country","value","label","onChange","TALLY_TYPES","prepareData","data","selectedTallyType","zeroDayMode","growthRateMode","getY","datum","index","previousDay","id","x","y","filter","App","useState","covidData","setCovidData","useEffect","isCurrent","fetch","then","res","json","array","Worldwide","Object","values","col","i","row","keys","sort","useCovidData","covidCountries","setSelectedTallyType","setZeroDayMode","logarithmicMode","setLogarithmicMode","setGrowthRateMode","lineConfig","width","window","innerWidth","height","margin","top","right","bottom","left","animate","enableSlices","enableArea","xScale","type","format","precision","yScale","base","axisBottom","tickValues","legend","legendOffset","className","curve","find","tallyType","event","target","checked","disabled","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fbeb21ba.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\n\nfunction transpose(array) {\n  return array[0].map((col, i) => array.map(row => row[i]));\n}\n\nfunction aggregateDay(day) {\n  return day.reduce((acc, el) => ({\n    ...acc,\n    confirmed: acc.confirmed + el.confirmed,\n    deaths: acc.deaths + el.deaths,\n    recovered: acc.recovered + el.recovered,\n  }), {\n    date: day[0].date,\n    confirmed: 0,\n    deaths: 0,\n    recovered: 0,\n  });\n}\n\nexport function useCovidData() {\n  const COVID_DATA_URL = \"https://pomber.github.io/covid19/timeseries.json\";\n  const [covidData, setCovidData] = useState(null);\n\n  useEffect(() => {\n    let isCurrent = true;\n    fetch(COVID_DATA_URL).then(res => res.json()).then(data => {\n      if (isCurrent) setCovidData(data);\n    });\n    return () => {\n      isCurrent = false;\n    };\n  }, []);\n\n  if (!covidData) {\n    return [null, null];\n  }\n\n  const Worldwide = transpose(Object.values(covidData))\n    .map(aggregateDay);\n\n  return [\n    {\n      Worldwide,\n      ...covidData,\n    },\n    covidData ? ['Worldwide', ...Object.keys(covidData).sort()] : null\n  ];\n}\n\n","import React from 'react';\nimport Select from 'react-select';\n\nexport function CountrySelector({countries, selectedCountry, setSelectedCountry}) {\n  return <Select\n    options={countries.map(country => ({value: country, label: country}))}\n    onChange={value => {\n      setSelectedCountry(value.value)\n    }}\n    value={{\n      value: selectedCountry,\n      label: selectedCountry,\n    }}\n  />;\n}\n","import React, { useState, useEffect } from 'react';\nimport { useCovidData } from './hooks/useCovidData';\nimport { CountrySelector } from './components/CountrySelector';\nimport Select from 'react-select';\nimport { Line } from '@nivo/line';\n\nconst TALLY_TYPES = [{\n  value: \"confirmed\",\n  label: \"Confirmed\"\n},{\n  value: \"deaths\",\n  label: \"Deaths\"\n},{\n  value: \"recovered\",\n  label: \"Recovered\"\n}]\n\nfunction App() {\n  const [covidData, covidCountries] = useCovidData();\n  const [selectedCountry, setSelectedCountry] = useState('Worldwide');\n  const [selectedTallyType, setSelectedTallyType] = useState('confirmed');\n  const [zeroDayMode, setZeroDayMode] = useState(false);\n  const [logarithmicMode, setLogarithmicMode] = useState(false);\n  const [growthRateMode, setGrowthRateMode] = useState(false);\n\n  useEffect(() => {\n    if (covidCountries && !selectedCountry) setSelectedCountry(covidCountries[0]);\n  }, [selectedCountry, covidCountries]);\n\n  const lineConfig = {\n    width: window.innerWidth - 20,\n    height: 400,\n    margin: { top: 20, right: 20, bottom: 60, left: 80},\n    animate: true,\n    enableSlices: 'x',\n    enableArea: true,\n    xScale: {\n      type: 'time',\n      format: '%Y-%m-%d',\n      precision: 'day'\n    },\n    yScale: logarithmicMode ? {\n      type: 'log',\n      base: 10,\n    } : { type: 'linear' },\n    axisBottom: {\n      format: '%b %d',\n      tickValues: 'every 7 days',\n      legend: 'time scale',\n      legendOffset: -12\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      { covidData && (\n        <>\n        <Line\n          curve=\"monotoneX\"\n          data={prepareData({\n            data: covidData,\n            selectedCountry,\n            selectedTallyType,\n            zeroDayMode,\n            growthRateMode\n          })}\n          {...lineConfig}\n        />\n        <CountrySelector\n          countries={covidCountries}\n          selectedCountry={selectedCountry}\n          setSelectedCountry={setSelectedCountry}\n        />\n        <Select\n          options={TALLY_TYPES}\n          value={TALLY_TYPES.find(tallyType => tallyType.value === selectedTallyType)}\n          onChange={tallyType => setSelectedTallyType(tallyType.value)}\n        />\n        Zero Day Mode\n        <input\n          type=\"checkbox\"\n          onChange={event => {\n            !event.target.checked && setLogarithmicMode(false);\n            setZeroDayMode(event.target.checked)\n          }}\n          value={zeroDayMode}\n        />\n        Logarithmic\n        <input\n          type=\"checkbox\"\n          disabled={!zeroDayMode}\n          onChange={event => {\n            setLogarithmicMode(event.target.checked)\n          }}\n          value={logarithmicMode}\n        />\n        Growth Rate\n        <input\n          type=\"checkbox\"\n          onChange={event => {\n            setGrowthRateMode(event.target.checked)\n          }}\n          value={growthRateMode}\n        />\n        </>\n      )}\n    </div>\n  );\n}\n\nfunction prepareData({data, selectedCountry, selectedTallyType, zeroDayMode, growthRateMode}) {\n  function getY(datum, index) {\n    if (!growthRateMode) {\n      return datum[selectedTallyType];\n    }\n\n    if (index < 1) {\n      return 0;\n    }\n\n    const previousDay = data[selectedCountry][index - 1];\n\n    if (!previousDay) {\n      return datum[selectedTallyType];\n    }\n\n    return (datum[selectedTallyType] - (previousDay[selectedTallyType] || 0)) / (previousDay[selectedTallyType] || 1);\n  }\n\n  return [{\n    id: selectedCountry,\n    data: data[selectedCountry].map((datum, index) => ({\n      x: datum.date,\n      y: getY(datum, index)\n    })).filter(({y}) => !zeroDayMode || y > 0)\n  }]}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}